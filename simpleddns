#!/usr/bin/env ruby

require 'socket'
require 'net/http'
require 'uri'
require 'optparse'
require 'yaml'

#returns the current_ip on the given interface according to ifconfig
def current_ip(inter)
    net_info = `ifconfig`
    section_index = net_info.index(inter)
    line_index = net_info.index('inet', section_index)
    ip_address = net_info[line_index..-1].match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)[0]
    return ip_address
end

#sends the actual update
def update_ip(ip, url, membersite, username, password)
    result = ""
    Net::HTTP.start(url) {|http|
        req = Net::HTTP::Get.new("/nic/update?hostname=#{membersite}&myip=#{ip}&wildcard=NOCHG&mx=NOCHG&backmx=NOCHG")
        req.basic_auth username, password
        req.add_field 'User-Agent', 'simpleddns'
        response = http.request(req)
        result = response.body
    }
    return result
end

options = {
    :config_file => '/etc/simpleddns.yml'
}

parser = OptionParser.new do |opts|
    opts.banner = "Usage: ddns [options]"

    opts.on("-c", "--config-file [CONFIG]", String, "Path to configuration file", "Default: ./conf.yml") do |file|
        options[:config_file] = file
    end
end

parser.parse!(ARGV)

if File.exists?(options[:config_file])
    conf = YAML.load_file(options[:config_file])
else
    raise "Can't read #{options[:config_file]}"
end

if conf['ip_file'] and File.exists?(conf['ip_file'])
    ip_file = File.new(conf['ip_file'])
    old_ip = ip_file.read()
    ip_file.close
else
    raise "Can't read IP file : #{conf['ip_file']}"
end

ip = current_ip(conf['interface'])
ip.strip!
old_ip.strip!
if !old_ip.eql?(ip)
    result = update_ip(ip, conf['url'], conf['member_site'], conf['username'], conf['password'])
    if result.start_with?('good')
        log_message = "Good update. IP changed to #{ip}\n"
        ip_file = File.new(conf['ip_file'], "w")
        ip_file.write(ip)
    else
        log_message = "Bad update. IP not changed - #{result}\n"
    end
else
    log_message = "No change - #{Time.now}\n"
end

if conf['log_file']
    log_file = File.new(conf['log_file'], "a")
    log_file.write(log_message)
end
